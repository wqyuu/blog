<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wqyuu.github.io/blog</id>
    <title>Wqyuu</title>
    <updated>2020-02-18T10:08:29.777Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wqyuu.github.io/blog"/>
    <link rel="self" href="https://wqyuu.github.io/blog/atom.xml"/>
    <subtitle>秉忠贞之志,守谦退之节</subtitle>
    <logo>https://wqyuu.github.io/blog/images/avatar.png</logo>
    <icon>https://wqyuu.github.io/blog/favicon.ico</icon>
    <rights>All rights reserved 2020, Wqyuu</rights>
    <entry>
        <title type="html"><![CDATA[Ubuntu 16.04搭建JAVA环境]]></title>
        <id>https://wqyuu.github.io/blog/post/ubuntu-1604-da-jian-java-huan-jing</id>
        <link href="https://wqyuu.github.io/blog/post/ubuntu-1604-da-jian-java-huan-jing">
        </link>
        <updated>2019-05-13T12:59:33.000Z</updated>
        <content type="html"><![CDATA[<p>搭建环境：Ubuntu 16.04 ×64<br>
JDK :jdk-8u171-linux-x64.tar.gz</p>
<ol>
<li>
<p>首先下载linux对应的安装包<br>
下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>
下载完成后，Linux默认下载位置在当前目录下的Download或下载文件夹下，通过命令cd ~/Downloads或cd  ~/下载即可查看到对应的文件。</p>
</li>
<li>
<p>解压安装包jdk-8u171-linux-x64.tar.gz<br>
tar -zxvf jdk-8u171-linux-x64.tar.gz</p>
</li>
<li>
<p>将解压后的文件夹移到/usr/lib目录下<br>
切换到 /usr/lib目录下<br>
cd  /usr/lib<br>
并新建jdk目录<br>
sudo mkdir jdk</p>
</li>
<li>
<p>将解压的jdk文件复制到新建的/usr/lib/jdk目录下来<br>
sudo mv ~/jdk1.8.0_171/usr/lib/jdk<br>
执行命令后可到 usr/lib/jdk 目录下查看是否复制成功</p>
</li>
<li>
<p>配置java环境变量<br>
这里是将环境变量配置在etc/profile，即为所有用户配置JDK环境。<br>
使用命令打开/etc/profile文件<br>
sudo vi /etc/profile<br>
在末尾添加以下几行文字：</p>
<pre><code class="language-config">#set java env
export JAVA_HOME=/usr/lib/jdk/jdk1.8.0_171
export JRE_HOME=${JAVA_HOME}/jre    
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib    
export PATH=${JAVA_HOME}/bin:$PATH 
</code></pre>
</li>
<li>
<p>执行命令使修改立即生效`<br>
source /etc/profile</p>
</li>
<li>
<p>配置软连接<br>
软连接相当于windows系统中的快捷键，部分软件可能会从/usr/bin目录下查找Java，因此添加该软连接防止其他软件查找不到的情况。</p>
</li>
</ol>
<pre><code>sudo update-alternatives --install /usr/bin/java  java  /usr/lib/jdk/jdk1.8.0_171/bin/java 300   
sudo update-alternatives --install /usr/bin/javac  javac  /usr/lib/jdk/jdk1.8.0_171/bin/javac 300 
扩展：在Ubuntu中通过update-alternatives切换jdk版本
</code></pre>
<ol start="8">
<li>测试安装是否成功<br>
在终端输入，出现版本号则表示安装成功<br>
java -version</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://wqyuu.github.io/blog/post-images/1582020044962.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Oracle数据库批量操作]]></title>
        <id>https://wqyuu.github.io/blog/post/oracle-shu-ju-ku-pi-liang-cao-zuo</id>
        <link href="https://wqyuu.github.io/blog/post/oracle-shu-ju-ku-pi-liang-cao-zuo">
        </link>
        <updated>2019-05-12T11:57:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一次对sql修改优化操作速度的记录">一次对SQL修改，优化操作速度的记录</h2>
<p>我需要把edit_stu表数据查出来批量插入到student_m中，<br>
由于SQL批量操作执行速度特别慢，尝试更换SQL语句解决速度问题<br>
根据需要我有两个方法做这个批量操作：</p>
<ul>
<li>方法1：</li>
</ul>
<pre><code class="language-xml">	&lt;insert id=&quot;insert1&quot; parameterType=&quot;java.util.HashMap&quot;&gt;
		 begin
        &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot; separator=&quot;;&quot;&gt;
        	 insert into student_m ( VERSION_ID, SYS_ID)
        values
            ( #{item.versionId,jdbcType=VARCHAR},
			#{item.sysId,jdbcType=VARCHAR}
        &lt;/foreach&gt;
        ;end;
    &lt;/insert&gt;
</code></pre>
<ul>
<li>方法2</li>
</ul>
<pre><code class="language-xml"> &lt;!--拷贝数据到查询表--&gt;
    &lt;insert id=&quot;insertCurrentBySelect&quot;  parameterType=&quot;java.util.HashMap&quot;&gt;
    	INSERT INTO  student_m ( VERSION_ID, SYS_ID)
	    SELECT   VERSION_ID, SYS_ID
      	FROM  edit_stu
	    WHERE VERSION_ID=#{versionId,jdbcType=VARCHAR}
    &lt;/insert&gt;
</code></pre>
<h2 id="两个方法操作速度对比">两个方法操作速度对比：</h2>
<table>
<thead>
<tr>
<th>数据量</th>
<th>方法1</th>
<th>方法2</th>
</tr>
</thead>
<tbody>
<tr>
<td>50</td>
<td>2s</td>
<td>2.5s</td>
</tr>
<tr>
<td>500</td>
<td>2.5s</td>
<td>5.2s</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MyBatis对于Java对象里的枚举类型处理]]></title>
        <id>https://wqyuu.github.io/blog/post/mybatis-dui-yu-java-dui-xiang-li-de-mei-ju-lei-xing-chu-li</id>
        <link href="https://wqyuu.github.io/blog/post/mybatis-dui-yu-java-dui-xiang-li-de-mei-ju-lei-xing-chu-li">
        </link>
        <updated>2019-05-10T12:54:48.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>mybatis里怎么处理枚举类型属性的增删改查呢？</p>
<p>要求：</p>
<p>插入的时候，会用枚举的定义插入数据库，我们希望在数据库中看到的是数字或者其他东西；</p>
<p>查询的时候，数据库的值可以自动转换为我们对应的枚举值。</p>
<p>举例，我有一个这样的枚举类型：</p>
<pre><code class="language-java">package cn.com.shuyangyang.domain;  
  
public enum UserStatus {  
  
    /** 无效*/  
    DISABLED(0),  
    /** 有效 */  
    AVAILABLE(1);  
      
    private int status;  
      
    UserStatus(int status){  
        this.status = status;  
    }  
  
    public int getStatus() {  
        return status;  
    }  
      
}  
</code></pre>
<p>我们插入数据库中，数据库应该为我们保存0或者1</p>
<p>我们可以使用mybatis自带的枚举类型EnumOrdinalTypeHandler</p>
<p>举例如下：</p>
<pre><code class="language-xml">&lt;insert id=&quot;addUser&quot; parameterType=&quot;User&quot;&gt;  
    INSERT INTO t_user(USER_ID,USER_NAME,LOGIN_NAME,  
    LOGIN_PASSWORD,USER_STATUS,CREATE_TIME,UPDATE_TIME)  
    VALUES(  
        #{user_id},  
        #{user_name},  
        #{login_name},  
        #{login_password},  
        #{user_status, typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},  
        #{create_time},  
        #{update_time}  
    )  
&lt;/insert&gt;
</code></pre>
<p>我们的UserStatus插入的时候是UserStatus.AVAILABLE</p>
<p>执行完毕后，看结果：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20190506101619818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<p>看，是不是结果是我们期望的那样。</p>
<p>但是问题来了？</p>
<p>我们查询的时候报错了：Error querying database.  Cause: java.lang.IllegalArgumentException: No enum constant cn.com.shuyangyang.mybatis.UserStatus.1</p>
<p>我们可以自定义这样的一个EnumStatusHandler：</p>
<pre><code class="language-java">package cn.com.shuyangyang.mybatis;  
  
import java.sql.CallableStatement;  
import java.sql.PreparedStatement;  
import java.sql.ResultSet;  
import java.sql.SQLException;  
  
import org.apache.ibatis.type.BaseTypeHandler;  
import org.apache.ibatis.type.JdbcType;  
  
/** 
 * Mybatis自定义转换类型 
 * @author ShuYangYang 
 * E-Mail:shuyangyang@aliyun.com 
 * http://www.shuyangyang.com.cn 
 * Date:2015年1月26日下午10:12:54 
 * 
 */  
public class EnumStatusHandler extends BaseTypeHandler&lt;UserStatus&gt; {  
      
    private Class&lt;UserStatus&gt; type;  
       
    private final UserStatus[] enums;  
   
    /** 
     * 设置配置文件设置的转换类以及枚举类内容，供其他方法更便捷高效的实现 
     * @param type 配置文件中设置的转换类 
     */  
    public EnumStatusHandler(Class&lt;UserStatus&gt; type) {  
        if (type == null)  
            throw new IllegalArgumentException(&quot;Type argument cannot be null&quot;);  
        this.type = type;  
        this.enums = type.getEnumConstants();  
        if (this.enums == null)  
            throw new IllegalArgumentException(type.getSimpleName()  
                    + &quot; does not represent an enum type.&quot;);  
    }  
  
    @Override  
    public void setNonNullParameter(PreparedStatement ps, int i,  
            UserStatus parameter, JdbcType jdbcType) throws SQLException {  
        // baseTypeHandler已经帮我们做了parameter的null判断  
        ps.setInt(i, parameter.getStatus());  
          
    }  
  
    @Override  
    public UserStatus getNullableResult(ResultSet rs, String columnName)  
            throws SQLException {  
        // 根据数据库存储类型决定获取类型，本例子中数据库中存放INT类型  
        int i = rs.getInt(columnName);  
           
        if (rs.wasNull()) {  
            return null;  
        } else {  
            // 根据数据库中的code值，定位EnumStatus子类  
            return locateEnumStatus(i);  
        }  
    }  
  
    @Override  
    public UserStatus getNullableResult(ResultSet rs, int columnIndex)  
            throws SQLException {  
        // 根据数据库存储类型决定获取类型，本例子中数据库中存放INT类型  
        int i = rs.getInt(columnIndex);  
        if (rs.wasNull()) {  
            return null;  
        } else {  
            // 根据数据库中的code值，定位EnumStatus子类  
            return locateEnumStatus(i);  
        }  
    }  
  
    @Override  
    public UserStatus getNullableResult(CallableStatement cs, int columnIndex)  
            throws SQLException {  
        // 根据数据库存储类型决定获取类型，本例子中数据库中存放INT类型  
        int i = cs.getInt(columnIndex);  
        if (cs.wasNull()) {  
            return null;  
        } else {  
            // 根据数据库中的code值，定位EnumStatus子类  
            return locateEnumStatus(i);  
        }  
    }  
      
    /** 
     * 枚举类型转换，由于构造函数获取了枚举的子类enums，让遍历更加高效快捷 
     * @param code 数据库中存储的自定义code属性 
     * @return code对应的枚举类 
     */  
    private UserStatus locateEnumStatus(int code) {  
        for(UserStatus status : enums) {  
            if(status.getStatus()==(Integer.valueOf(code))) {  
                return status;  
            }  
        }  
        throw new IllegalArgumentException(&quot;未知的枚举类型：&quot; + code + &quot;,请核对&quot; + type.getSimpleName());  
    }  
  
}  
</code></pre>
<p>mapper.xml里这样配置：</p>
<p>XML/HTML Code复制内容到剪贴板<br>
<resultMap type="User" id="userResult"><br>
……省略其他属性配置<br>
<result column="USER_STATUS" property="user_status" typeHandler="cn.com.shuyangyang.mybatis.EnumStatusHandler"/><br>
……省略其他属性配置<br>
</resultMap><br>
现在来看看结果：</p>
<blockquote>
<p>[User [user_id=782cba19-559f-41c3-a1b0-25fcac4cf118, user_name=系统管理员, login_name=admin, login_password=admin,user_status=AVAILABLE, create_time=Mon Jan 26 21:17:09 CST 2015, update_time=Mon Jan 26 21:17:09 CST 2015]]</p>
</blockquote>
<p>完美结果。</p>
<p>转载自： http://www.shuyangyang.com.cn/jishuliangongfang/Javabiancheng/2015-01-26/229.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VirtualBox+ubantu16.04联网]]></title>
        <id>https://wqyuu.github.io/blog/post/virtualboxubantu1604-lian-wang</id>
        <link href="https://wqyuu.github.io/blog/post/virtualboxubantu1604-lian-wang">
        </link>
        <updated>2019-05-06T07:51:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="virtualboxubantu1604联网">VirtualBox+ubantu16.04联网</h2>
<p>一、安装virtualbox后会自动安装一个虚拟网卡，一般来说，名字会是VirtualBox Host-Only Network<br>
<img src="https://img-blog.csdnimg.cn/20190506174943352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
二、右键已连接上的网络（可能是以太网也可以是wifi）-&gt; 属性 -&gt;共享<br>
<img src="https://img-blog.csdnimg.cn/2019050617500488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
三、修改这个虚拟网卡的ipv4设置（右键虚拟网卡-&gt;属性-&gt;ipv4协议-&gt;属性）<br>
<img src="https://img-blog.csdnimg.cn/20190506175016812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
四、修改virtualbox上的虚拟机的网卡设置为Host-Only 。这里注意！一定按照图示设置，就算使用wifi，也要填接入网线<br>
<img src="https://img-blog.csdnimg.cn/20190506175031631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
五、然后配置虚拟机的网络配置文件</p>
<ol>
<li>
<p>输入ifconfig命令查看网卡信息，下图红圈处就是网卡名称。<br>
<img src="https://img-blog.csdnimg.cn/20190506175244478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
</li>
<li>
<p>配置网卡文件<br>
注意：不同的linux系统，网卡配置文件是不同的，这里ubuntu的网卡配置文件是/etc/network/interfaces<br>
输入下面命令进行编辑网卡文件<br>
sudo vi /etc/network/interfaces<br>
默认的文件内容如下：</p>
<blockquote>
<p>auto lo iface lo inet loopback</p>
</blockquote>
<p>现在修改配置文件。修改方式有两种<br>
方式一：静态ip<br>
修改内容如下：下面的enp0s3需要改成自己的网卡名称，就是上面第一步的红圈信息。ip地址，掩码网关自己合理配置就行了。记得wq!保存退出。</p>
<blockquote>
<p>auto enp0s3<br>
iface enp0s3 inet static<br>
address 192.168.56.3<br>
netmask 255.255.255.0<br>
gateway  192.168.56.1<br>
dns-nameservers 223.5.5.5</p>
</blockquote>
<p>方式二：动态获取ip配置</p>
<blockquote>
<p>auto enp0s3 	<br>
iface enp0s3 inet dhcp</p>
</blockquote>
<p>注意上面的网卡写成自己的网卡名称。记得wq!保存退出。</p>
</li>
<li>
<p>修改DNS服务器地址</p>
<p>通过/etc/network/interfaces，在它的最后增加一句下面的内容：下面的223.5.5.5是阿里的dns地址，可以自己选择适合的dns地址。</p>
<blockquote>
<p>dns-nameservers 223.5.5.5</p>
</blockquote>
<blockquote>
<p>重启网卡:   /etc/init.d/networking restart</p>
</blockquote>
<p>重启后DNS就生效了，这时候再看/etc/resolv.conf，最下面就多了一行：</p>
<blockquote>
<p>#Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8) 	 	# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN 	 	<br>
nameserver 223.5.5.5</p>
</blockquote>
</li>
<li>
<p>重启电脑<br>
注意：不是重启网卡,一定要重启reboot重启电脑才行。<br>
下面这些命令只能用来启动和关闭网卡，但是不能让修改的配置立即生效。</p>
<blockquote>
<p>/etc/init.d/networking restart 或者（下面是指定启动关闭某个网卡命令） ifdown enp0s3<br>
（关闭网卡enp0s3） ifup   enp0s3    (启动网卡enp0s3)<br>
sudo service network-manager restart</p>
</blockquote>
</li>
</ol>
<p>测试：ping www.baidu.com<br>
<img src="https://img-blog.csdnimg.cn/20190506180838652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>
<p>参照：<br>
1.<a href="https://blog.csdn.net/stay_zezo/article/details/80718369">ubantu16.04联网</a><br>
2.<a href="https://wqyuu.github.io/blog/post-images/1582019587188.jpg">Virtualbox下利用host-only连接方式实现虚拟机和物理机联网（包括wifi）</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker下安装ElasticSearch]]></title>
        <id>https://wqyuu.github.io/blog/post/docker-xia-an-zhuang-elasticsearch</id>
        <link href="https://wqyuu.github.io/blog/post/docker-xia-an-zhuang-elasticsearch">
        </link>
        <updated>2019-05-03T06:50:06.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p><a href="https://blog.csdn.net/ityouknow/article/details/90899131">Docker 入门及安装[Docker 系列-1]</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/qq_37338761/article/details/90697027">Docker安装及问题解决(ubuntu16.04)</a></p>
</li>
<li>
<p>全文搜索属于最常见的需求，开源的 Elasticsearch （以下简称 Elastic）是目前全文搜索引擎的首选。</p>
</li>
<li>
<p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p>
</li>
<li>
<p>Elastic 的底层是开源库 Lucene。但是，你没法直接用 Lucene，必须自己写代码去调用它的接口。Elastic 是 Lucene 的封装，提供了 REST API 的操作接口，开箱即用。</p>
</li>
</ul>
<h3 id="安装elasticsearch">安装ElasticSearch</h3>
<h4 id="1-从docker仓库搜索elasticsearch">1. 从docker仓库搜索ElasticSearch</h4>
<pre><code class="language-shell">$ docker search elasticsearch
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/2019060511251850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="2选择一个版本拉取镜像-我安装的是246">2.选择一个版本，拉取镜像。我安装的是2.4.6</h4>
<p>2.4.6是目前springboot支持的最高版本<br>
<img src="https://img-blog.csdnimg.cn/20190605112719550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
参考：https://github.com/spring-projects/spring-data-elasticsearch/wiki/Spring-Data-Elasticsearch---Spring-Boot---version-matrix</p>
<pre><code class="language-shell">$  docker pull elasticsearch:2.4.6
</code></pre>
<p>查看镜像</p>
<pre><code class="language-shell">$  docker images
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20190605113028725.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="3通过镜像启动一个容器并将9200和9300端口映射到本机">3.通过镜像，启动一个容器，并将9200和9300端口映射到本机</h4>
<pre><code class="language-shell">$ docker run -d -p 9200:9200 -p 9300:9300 --name elasticsearch elasticsearch:2.4.6
</code></pre>
<h4 id="4-查看容器">4. 查看容器</h4>
<pre><code class="language-shell">$ docker ps #查看已启动容器
$ docker ps -a #查看所有容器，包括停止的
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/2019060511362011.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="5查看是否安装成功">5.查看是否安装成功</h4>
<pre><code class="language-shell">$ curl http://localhost:9200
{
  &quot;name&quot; : &quot;Sean Cassidy&quot;,
  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,
  &quot;cluster_uuid&quot; : &quot;4F4r988CQsOPZZ7jbb9yWg&quot;,
  &quot;version&quot; : {
    &quot;number&quot; : &quot;2.4.6&quot;,
    &quot;build_hash&quot; : &quot;5376dca9f70f3abef96a77f4bb22720ace8240fd&quot;,
    &quot;build_timestamp&quot; : &quot;2017-07-18T12:17:44Z&quot;,
    &quot;build_snapshot&quot; : false,
    &quot;lucene_version&quot; : &quot;5.5.4&quot;
  },
  &quot;tagline&quot; : &quot;You Know, for Search&quot;
}
</code></pre>
<h3 id="安装head插件">安装head插件</h3>
<h4 id="1进入容器">1.进入容器</h4>
<pre><code class="language-shell">$ docker exec -it d011a9da6f79/bin/bash #d011a9da6f79为容器id
</code></pre>
<p>到/bin目录下，执行plugin命令</p>
<pre><code class="language-shell">$ cd bin$ plugin install mobz/elasticsearch-head
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20190605113722321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h4 id="2安装完成后浏览器访问">2.安装完成后，浏览器访问</h4>
<p>http://localhost:9200/_plugin/head/</p>
<p><img src="https://img-blog.csdnimg.cn/20190605113857324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>
<strong>如果对你有帮助，点个赞吧！</strong>😘</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zookeeper分布式锁的简单实现]]></title>
        <id>https://wqyuu.github.io/blog/post/zookeeper-fen-bu-shi-suo-de-jian-dan-shi-xian</id>
        <link href="https://wqyuu.github.io/blog/post/zookeeper-fen-bu-shi-suo-de-jian-dan-shi-xian">
        </link>
        <updated>2019-05-01T02:41:27.000Z</updated>
        <content type="html"><![CDATA[<p><em><strong>使用InterProcessMutex实现</strong></em></p>
<blockquote>
<p>InterProcessMutex基于Zookeeper实现了分布式的公平可重入互斥锁，类似于单个JVM进程内的ReentrantLock</p>
</blockquote>
<h3 id="1初始化interprocessmutex">1.初始化InterProcessMutex</h3>
<pre><code class="language-java">private  static InterProcessMutex mutex = new InterProcessMutex(client, &quot;/curator/lock&quot;); 
</code></pre>
<h3 id="2获取锁">2.获取锁</h3>
<pre><code class="language-java">    //获得了锁
    public static boolean acquire(long time, TimeUnit unit){
    	try {
			return mutex.acquire(time,unit);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
    }
</code></pre>
<h3 id="3释放锁">3.释放锁</h3>
<pre><code class="language-java">    //释放锁
    public static void release(){
    	try {
			mutex.release();
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
</code></pre>
<h3 id="测试">测试：</h3>
<pre><code class="language-java">import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import org.apache.curator.RetryPolicy;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.framework.recipes.locks.InterProcessMutex;
import org.apache.curator.retry.ExponentialBackoffRetry;
/**
 * 基于curator的zookeeper分布式锁
 * 这里我们开启5个线程，每个线程获取锁的最大等待时间为5秒，为了模拟具体业务场景，方法中设置4秒等待时间。
 * 
 */
public class CuratorUtil {
    private static String address = &quot;192.168.12.101:2181&quot;;
	
    public static void main(String[] args) {
		//1、重试策略：初试时间为1s 重试3次
		RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3); 
		//2、通过工厂创建连接
		CuratorFramework client = CuratorFrameworkFactory.newClient(address, retryPolicy);
        //3、开启连接
        client.start();
        //4 分布式锁
        final InterProcessMutex mutex = new InterProcessMutex(client, &quot;/curator/lock&quot;); 
        //读写锁
        //InterProcessReadWriteLock readWriteLock = new InterProcessReadWriteLock(client, &quot;/readwriter&quot;);
        
        ExecutorService fixedThreadPool = Executors.newFixedThreadPool(5);
        
        for (int i = 0; i &lt; 5; i++) {
            fixedThreadPool.submit(new Runnable() {
                @Override
                public void run() {
                	boolean flag = false;
                	try {
                		//尝试获取锁，最多等待5秒
                		flag = mutex.acquire(5, TimeUnit.SECONDS);
                		Thread currentThread = Thread.currentThread();
                		if(flag){
                			System.out.println(&quot;线程&quot;+currentThread.getId()+&quot;获取锁成功&quot;);
                		}else{
                			System.out.println(&quot;线程&quot;+currentThread.getId()+&quot;获取锁失败&quot;);
                		}
                		//模拟业务逻辑，延时4秒
                		Thread.sleep(4000);
					} catch (Exception e) {
						e.printStackTrace();
					} finally{
						if(flag){
							try {
								mutex.release();
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
                }
            });
        }
	}
}
</code></pre>
<p>这里我们开启5个线程，每个线程获取锁的最大等待时间为5秒，为了模拟具体业务场景，方法中设置4秒等待时间。开始执行main方法，通过ZooInspector监控/curator/lock下的节点如下图：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20190826210337845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MzM4NzYx,size_16,color_FFFFFF,t_70" alt="ZooInspector监控" loading="lazy"></figure>
<p>对，没错，设置4秒的业务处理时长就是为了观察生成了几个顺序节点。果然如案例中所述，每个线程都会生成一个节点并且还是有序的。观察控制台，我们会发现只有两个线程获取锁成功，另外三个线程超时获取锁失败会自动删除节点。线程执行完毕我们刷新一下/curator/lock节点，发现刚才创建的五个子节点已经不存在了。</p>
<p>InterProcessMutex源码分析:<br>
<a href="https://www.cnblogs.com/shileibrave/p/9854921.html">https://www.cnblogs.com/shileibrave/p/9854921.html</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zookeeper的Java客户端Curator(6)]]></title>
        <id>https://wqyuu.github.io/blog/post/zookeeper-de-java-ke-hu-duan-curator6</id>
        <link href="https://wqyuu.github.io/blog/post/zookeeper-de-java-ke-hu-duan-curator6">
        </link>
        <updated>2019-04-30T11:39:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="实践6-认证授权">实践6 认证授权</h3>
<h5 id="1递归权限">1.递归权限</h5>
<ul>
<li>creatingParentsIfNeeded()：父节点不存在。递归创建节</li>
<li>CreateMode.PERSISTENT：递归创建</li>
<li>withACL()设置节点权限</li>
<li>withACL(acls, true) 递归设置节点权限</li>
</ul>
<pre><code class="language-java">		// 实例化
		CuratorAcl cto = new CuratorAcl();
		boolean isZkCuratorStarted = cto.client.isStarted();
		System.out.println(&quot;当前客户的状态：&quot; + (isZkCuratorStarted ? &quot;连接中&quot; : &quot;已关闭&quot;));
		
		String nodePath = &quot;/acl/father/child/sub&quot;;
		
		List&lt;ACL&gt; acls = new ArrayList&lt;ACL&gt;();
		Id imooc1 = new Id(&quot;digest&quot;, AclUtils.getDigestUserPwd(&quot;imooc1:123456&quot;));
		Id imooc2 = new Id(&quot;digest&quot;, AclUtils.getDigestUserPwd(&quot;imooc2:123456&quot;));
		acls.add(new ACL(Perms.ALL, imooc1));
		acls.add(new ACL(Perms.READ, imooc2));
		acls.add(new ACL(Perms.DELETE | Perms.CREATE, imooc2));
		
		// 创建节点
		byte[] data = &quot;spiderman&quot;.getBytes();
		cto.client.create().creatingParentsIfNeeded()
				.withMode(CreateMode.PERSISTENT)
				.withACL(acls, true)
				.forPath(nodePath, data);
</code></pre>
<h5 id="2设置单节点权限">2.设置单节点权限</h5>
<p>如果想修改已有节点的权限，可以使用下面方法：</p>
<pre><code class="language-java">cto.client.setACL().withACL(acls).forPath(&quot;/curatorNode&quot;);
</code></pre>
<h5 id="3创建时授权">3.创建时授权</h5>
<p>创建时授权才可以递归对节点创建授权<br>
父节点授权时，用户默认权限没办法访问这个节点，所以需要授权</p>
<pre><code class="language-java">RetryPolicy retryPolicy = new RetryNTimes(3, 5000);
		client = CuratorFrameworkFactory.builder().authorization(&quot;digest&quot;, &quot;imooc:123456&quot;.getBytes())
				.connectString(zkServerPath)
				.sessionTimeoutMs(10000).retryPolicy(retryPolicy)
				.namespace(&quot;workspace&quot;).build();
		client.start();
</code></pre>
<h5 id="4测试权限">4.测试权限</h5>
<pre><code class="language-java">		// 更新节点数据
		byte[] newData = &quot;batman&quot;.getBytes();
		cto.client.setData().withVersion(0).forPath(nodePath, newData);
</code></pre>
<p>初始化使用用户imooc授权，对节点修改数据会报错:no Auth<br>
切换为imooc用户可以正常进行修改</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zookeeper的Java客户端Curator(5)]]></title>
        <id>https://wqyuu.github.io/blog/post/zookeeper-de-java-ke-hu-duan-curator5</id>
        <link href="https://wqyuu.github.io/blog/post/zookeeper-de-java-ke-hu-duan-curator5">
        </link>
        <updated>2019-04-28T01:37:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="实践5-监听子节点">实践5  监听子节点</h3>
<p>StartMode一般选POST_INITIALIZED_EVENT，这个会有提醒初始化成功<br>
如果想细致到对某个节点的监听，可以获取节点的路径： String path = event.getData().getPath(); 判断这个路径来确定节点创建成功失败</p>
<pre><code class="language-java">final static String ADD_PATH = &quot;/super/imooc/d&quot;;


// 为子节点添加watcher
// PathChildrenCache: 监听数据节点的增删改，会触发事件
String childNodePathCache =  nodePath;// cacheData: 设置缓存节点的数据状态
final PathChildrenCache childrenCache = new PathChildrenCache(cto.client, childNodePathCache, true);
/**
 * StartMode: 初始化方式
 * POST_INITIALIZED_EVENT：异步初始化，初始化之后会触发事件
 * NORMAL：异步初始化
 * BUILD_INITIAL_CACHE：同步初始化
 */
childrenCache.start(StartMode.POST_INITIALIZED_EVENT);
		
List&lt;ChildData&gt; childDataList = childrenCache.getCurrentData();
System.out.println(&quot;当前数据节点的子节点数据列表：&quot;);
for (ChildData cd : childDataList) {
	String childData = new String(cd.getData());
	System.out.println(childData);
}
childrenCache.getListenable().addListener(new PathChildrenCacheListener() {
        public void childEvent(CuratorFramework client,PathChildrenCacheEvent event) throws Exception {
                if(event.getType().equals(PathChildrenCacheEvent.Type.INITIALIZED)){
                  System.out.println(&quot;子节点初始化ok...&quot;);
                }else if(event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)){
                  String path = event.getData().getPath();
                  if (path.equals(ADD_PATH)) {
                        System.out.println(&quot;添加子节点:&quot; + event.getData().getPath());
                        System.out.println(&quot;子节点数据:&quot; + new String(event.getData().getData()));
                    } else if (path.equals(&quot;/super/imooc/e&quot;)) {
                        System.out.println(&quot;添加不正确...&quot;);
                    }

                }else if(event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)){
                    System.out.println(&quot;删除子节点:&quot; + event.getData().getPath());
                }else if(event.getType().equals(PathChildrenCacheEvent.Type.CHILD_UPDATED)){
                    System.out.println(&quot;修改子节点路径:&quot; + event.getData().getPath());
                    System.out.println(&quot;修改子节点数据:&quot; + new String(event.getData().getData()));
                }
            }
});



</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zookeeper的Java客户端Curator(4)]]></title>
        <id>https://wqyuu.github.io/blog/post/zookeeper-de-java-ke-hu-duan-curator4</id>
        <link href="https://wqyuu.github.io/blog/post/zookeeper-de-java-ke-hu-duan-curator4">
        </link>
        <updated>2019-04-26T13:40:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="实践4">实践4</h3>
<h4 id="1watcher-事件">1.watcher 事件</h4>
<p>当使用usingWatcher的时候，监听只会触发一次，监听完毕后就销毁</p>
<pre><code class="language-java">// watcher 事件  当使用usingWatcher的时候，监听只会触发一次，监听完毕后就销毁
cto.client.getData().usingWatcher(new MyCuratorWatcher()).forPath(nodePath);
//cto.client.getData().usingWatcher(new MyWatcher()).forPath(nodePath);
</code></pre>
<h4 id="2监听缓存">2.监听缓存</h4>
<blockquote>
<ul>
<li>NodeCache: 监听数据节点的变更，会触发事件。一直运行监听，增删改操作都会输出节点信息 nodePath为监听路径。</li>
<li>nodeCache.start(true);为开启监听 初始化使用true，可以在获取客户端进行连接时节点的数据。</li>
<li>nodeCache.getListenable()<br>
获取所有监听列表。nodeCache.getListenable()也有remove事件，用来移除监听。</li>
<li>只要有事件发生就会触发NodeCacheListener的nodeChanged()方法</li>
</ul>
</blockquote>
<pre><code class="language-java">// 为节点添加watcher
// NodeCache: 监听数据节点的变更，会触发事件
final NodeCache nodeCache = new NodeCache(cto.client, nodePath);
// buildInitial : 初始化的时候获取node的值并且缓存
nodeCache.start(true);
if (nodeCache.getCurrentData() != null) {
	System.out.println(&quot;节点初始化数据为：&quot; + new String(nodeCache.getCurrentData().getData()));
} else {
	System.out.println(&quot;节点初始化数据为空...&quot;);
}
nodeCache.getListenable().addListener(new NodeCacheListener() {
	public void nodeChanged() throws Exception {
		if (nodeCache.getCurrentData() == null) {
			System.out.println(&quot;空&quot;);
			return;
		}
		String data = new String(nodeCache.getCurrentData().getData());
		System.out.println(&quot;节点路径：&quot; + nodeCache.getCurrentData().getPath() + &quot;数据：&quot; + data);
	}
});
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zookeeper的Java客户端Curator(3)]]></title>
        <id>https://wqyuu.github.io/blog/post/zookeeper-de-java-ke-hu-duan-curator3</id>
        <link href="https://wqyuu.github.io/blog/post/zookeeper-de-java-ke-hu-duan-curator3">
        </link>
        <updated>2019-04-22T12:33:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="实践3">实践3</h3>
<h4 id="1读取节点数据">1.读取节点数据</h4>
<p>storingStatIn拿到Stat信息，并进行存储</p>
<pre><code class="language-java">// 读取节点数据
Stat stat = new Stat();
byte[] data = cto.client.getData().storingStatIn(stat).forPath(nodePath);
System.out.println(&quot;节点&quot; + nodePath + &quot;的数据为: &quot; + new String(data));
System.out.println(&quot;该节点的版本号为: &quot; + stat.getVersion());
</code></pre>
<h4 id="2查询子节点">2.查询子节点</h4>
<pre><code class="language-java">
// 查询子节点
List&lt;String&gt; childNodes = cto.client.getChildren()
									.forPath(nodePath);
System.out.println(&quot;开始打印子节点：&quot;);
for (String s : childNodes) {
	System.out.println(s);
}
</code></pre>
<h4 id="3判断节点是否存在">3.判断节点是否存在</h4>
<pre><code class="language-java">// 判断节点是否存在,如果不存在则为空
Stat statExist = cto.client.checkExists().forPath(nodePath + &quot;/it7&quot;);
System.out.println(statExist);
</code></pre>
]]></content>
    </entry>
</feed>